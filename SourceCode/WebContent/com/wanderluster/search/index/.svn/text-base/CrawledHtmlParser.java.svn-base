package com.wanderluster.search.index;

import java.io.File;
import java.io.IOException;

import jeasy.analysis.MMAnalyzer;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.SimpleAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.RAMDirectory;
import org.htmlparser.util.ParserException;
import org.junit.Test;

import com.wanderluster.db.DocRecord;
import com.wanderluster.db.DocRecordDaoImpl;
import com.wanderluster.parsehtml.HtmlParser;
import com.wanderluster.util.Constant;
import com.wanderluster.util.StringUtil;

public class CrawledHtmlParser {

	private DocRecordDaoImpl docDao;

	String indexDir = Constant.indexDir;
    
	long ldate;


	/**
	 * 
	 * 
	 * @throws IOException
	 * @throws ParserException
	 */
	public void addIndex() throws IOException, ParserException {

		String temppath = "/Users/changlewang/Programming/workspace/Heritrix/jobs/CrawlYifei-20110424011453052/mirror";
		//String temppath = "/home/ethan/workspace/Heritrix/jobs/DiscretMathCrawl-20100619154829947/";
		
		File localFile = new File(temppath);

		Analyzer analyzer = new SimpleAnalyzer();

		Directory dir = FSDirectory.getDirectory(indexDir);
		
		ldate= docDao.getLastModify(".WebHtml");

		IndexWriter writer = new IndexWriter(dir, analyzer, false,
				IndexWriter.MaxFieldLength.UNLIMITED);

		SubIndexBuilder(writer, localFile);

		writer.optimize();
		writer.close();

	}

	/**
	 * 递归函数，递归遍历目录，如果找到子目录，继续递归；如果找到文件，分析文件内容并建立索引
	 * 
	 * @param fswriter
	 * @param subPath
	 * @throws ParserException
	 */
	public void SubIndexBuilder(IndexWriter fswriter, File subPath)
			throws IOException, ParserException {

		File[] filelist = subPath.listFiles();
		for (int i = 0; i < filelist.length; i++) {
			File file = filelist[i];
			if (file.isDirectory()) {
				SubIndexBuilder(fswriter, file);
			} else if (IsValidType(file.getAbsolutePath())) {
				fileindexBuilder(fswriter, file);
			}
		}

	}
    /**
     * 判断文件是否属于网页类型
     * @param name
     * @return
     */
	private boolean IsValidType(String name) {
		
		if(name.indexOf(".htm")!=-1||
		  name.indexOf(".html")!=-1||
		  name.indexOf(".asp")!=-1||
		  name.indexOf(".aspx")!=-1||
		  name.indexOf(".php")!=-1||
		  name.indexOf(".jsp")!=-1||
		  name.indexOf(".shtm")!=-1||
		  name.indexOf(".shtml")!=-1)
			
			return true;
		else
			return false;
		  
	}

	/**
	 * 对网页进行索引并添加到数据库
	 * @param fswriter
	 * @param subfile
	 * @throws IOException
	 * @throws ParserException
	 */
	public void fileindexBuilder(IndexWriter fswriter, File subfile)
			throws IOException, ParserException {

	
		Analyzer analyzer = new SimpleAnalyzer();

		
           if(subfile.lastModified() > ldate){

			DocRecord drec = new DocRecord();

			String strtmp = subfile.getAbsolutePath();

			HtmlParser parser = new HtmlParser();

			String title = parser.GetTitle(strtmp, "UTF-8");

			Document document = new Document();

			drec.setFilename(title);

			drec.setDoctype(".WebHtml");

			drec.setLastmodify(subfile.lastModified());

			int id = docDao.createDocRec(drec);

			String link =getRealLink(strtmp); 

			document.add(new Field("id", "" + id, Field.Store.YES,
					Field.Index.ANALYZED));
			
			document.add(new Field("type", "WebHtml", Field.Store.YES,
					Field.Index.ANALYZED));

			document.add(new Field("link",link , Field.Store.YES,
					Field.Index.NO));

			document.add(new Field("fileName", title, Field.Store.YES,
					Field.Index.ANALYZED));
			
			document.add(new Field("contents", parser.ParseHtmlText(strtmp,
					"UTF-8"), Field.Store.YES, Field.Index.ANALYZED));
			
			fswriter.addDocument(document);
			fswriter.optimize();
           }

		

	}

	/**
	 * 获取索引网页的真实链接
	 * @param temppath
	 * @return
	 */
	public String getRealLink(String temppath) {
		

		int start = temppath.indexOf("mirror") + 7;

		String link = "http://"+temppath.substring(start);
		
		return link;

	}

	public DocRecordDaoImpl getDocDao() {
		return docDao;
	}

	public void setDocDao(DocRecordDaoImpl docDao) {
		this.docDao = docDao;
	}

}
